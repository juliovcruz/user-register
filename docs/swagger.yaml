basePath: /
definitions:
  handlers.Err:
    properties:
      error:
        type: string
    type: object
  handlers.TokenResponse:
    properties:
      token:
        type: string
    type: object
  users.Address:
    properties:
      city:
        type: string
      neighborhood:
        type: string
      number:
        type: string
      state:
        type: string
      street:
        type: string
      zip_code:
        type: string
    type: object
  users.CreateUser:
    properties:
      confirm_password:
        example: password
        type: string
      email:
        example: user@example.com
        type: string
      name:
        example: User Name
        maxLength: 100
        minLength: 3
        type: string
      password:
        example: password
        maxLength: 100
        minLength: 6
        type: string
      zip_code:
        example: "743060400"
        type: string
    required:
    - email
    - name
    - password
    - zip_code
    type: object
  users.ForgotPassword:
    properties:
      email:
        example: user@example.com
        type: string
    required:
    - email
    type: object
  users.Login:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password
        maxLength: 100
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  users.UpdatePassword:
    properties:
      code:
        example: 123456
        type: integer
      confirm_password:
        example: password
        type: string
      email:
        example: user@example.com
        type: string
      password:
        example: password
        maxLength: 100
        minLength: 6
        type: string
    required:
    - code
    - email
    - password
    type: object
  users.User:
    properties:
      address:
        $ref: '#/definitions/users.Address'
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API para registro de usuários
  title: User Register API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: 'Lista todos os usuários com limite e deslocamento utilizar header
        "Authorization": "Bearer {token}"'
      parameters:
      - description: Limite de usuários
        in: query
        name: limit
        type: integer
      - description: Deslocamento
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Err'
      summary: Lista usuários
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Cria um usuário com nome, e-mail e senha
      parameters:
      - description: Usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/users.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Err'
      summary: Cria um novo usuário
      tags:
      - users
  /users/forgot_password:
    post:
      consumes:
      - application/json
      description: Envia um e-mail para recuperação de senha
      parameters:
      - description: Email para recuperação
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/users.ForgotPassword'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Err'
      summary: Inicia recuperação de senha
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Faz login com o e-mail e a senha do usuário
      parameters:
      - description: Fazer login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/users.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Err'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Err'
      summary: Faz login do usuário
      tags:
      - users
  /users/password:
    put:
      consumes:
      - application/json
      description: Atualiza a senha do usuário com base no e-mail
      parameters:
      - description: Atualizar senha
        in: body
        name: updatePassword
        required: true
        schema:
          $ref: '#/definitions/users.UpdatePassword'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Err'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Err'
      summary: Atualiza a senha do usuário
      tags:
      - users
swagger: "2.0"
